name: VCPKG Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  OUT_PATH: install
  CHECKOUT_REF: 'v103.0.0'
  ARCHIVE_NAME: ${{ github.event.repository.name }}-${{ github.event.repository.tag_name }}
jobs:
#   # Run the job only when we want the given arch on the given OS
#   if: contains(matrix.os.archs, matrix.arch)
#   wheels:
#     # Note references to within matrix.os' data structure
#     name: >
#       Build ${{ matrix.os.name }} ${{ matrix.py }} ${{ matrix.arch }}
#       wheels
#     runs-on: ${{ matrix.os.version }}
#     strategy:
#       matrix:
#         # We are limited to a matrix with 256 elements.
#         # More than that and you can fall back to generating sparse
#         # matrix elements with "include:", using cog.
#         os:
#           - ubuntu:
#               # the key of the mapping does not seem to be made available
#               # by the github API, so provide a value with the os name
#               name: ubuntu
#               version: ubuntu-latest
#               archs:
#                 - x86_64
#                 - i686
#                 - aarch64
#           - windows:
#               name: windows
#               version: windows-latest
#               archs:
#                 - x86
#                 - amd64
#           - macos:
#               name: macos
#               version: macos-latest
#               archs:
#                 - x86_64
#         py:
#           - cp36
#           - cp37
#           - cp38
#           - cp39
#           - cp310
#         arch:
#           - x86_64
#           - i686
#           - aarch64
#           - x86
#     fail-fast: false
  build_windows_x86:
    name: Windows Build X86
    runs-on: windows-latest
    strategy:
      matrix:
        kind: [x86]
    steps:
#       - name: Install 7Zip PowerShell Module
#         shell: powershell
#         run: Install-Module 7Zip4PowerShell -Force
        
#       - name: Get current date
#         id: date
#         run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
        
    - uses: actions/checkout@v2
#       id: checkout
#     - name: Set output
#       id: vars
#       run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
#     - name: Check output
#       env:
#         RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
#       run: |
#         echo $RELEASE_VERSION
#         echo ${{ steps.vars.outputs.tag }}

#        
#         run: echo "GIT_TAG=`echo $(git describe --tags --abbrev=0)`" >> $GITHUB_ENV
#          git fetch --tags --force # Retrieve annotated tags. THIS TRICK REALLY HELPS
#          echo ::set-output name=subject::$(git for-each-ref $GITHUB_REF --format='%(contents:subject)')
#          # …
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1

    - name: Installing vcpkg
      run: |
        git clone --depth 1 https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        .\bootstrap-vcpkg.bat
        .\vcpkg.exe --triplet x86-windows-static integrate install
        .\vcpkg.exe install openssl:x86-windows-static
        set OPENSSL_ROOT_DIR="./installed/x86-windows-static"


#     - name: Configure CMake Static Library
#       # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#       # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#       run: cmake -B ${{github.workspace}}/static -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=${{env.OUT_PATH}} -DLIVE555_ENABLE_OPENSSL=ON -DLIVE555_BUILD_EXAMPLES=ON
      
#     - name: Build Static Library
#       # Build your program with the given configuration
#       run: 
#         cmake --build ${{github.workspace}}/static --config ${{env.BUILD_TYPE}} --target ${{env.OUT_PATH}}
       
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      #-DCMAKE_TOOLCHAIN_FILE=D:/a/live555/live555/vcpkg/scripts/buildsystems/vcpkg.cmake
      #-DOPENSSL_ROOT_DIR="D:/vcpkg/installed/x64-windows" 
      run: 
        #cmake -B ${{github.workspace}}/windows -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_INSTALL_PREFIX=${{env.OUT_PATH}} -DLIVE555_ENABLE_OPENSSL=OFF -DLIVE555_BUILD_EXAMPLES=OFF -DCMAKE_TOOLCHAIN_FILE="./vcpkg/scripts/buildsystems/vcpkg.cmake"          
        cmake -B ${{github.workspace}}/windows -A Win32 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_INSTALL_PREFIX=${{env.OUT_PATH}} -DLIVE555_ENABLE_OPENSSL=ON -DLIVE555_BUILD_EXAMPLES=OFF -DCMAKE_TOOLCHAIN_FILE="./vcpkg/scripts/buildsystems/vcpkg.cmake" -DCMAKE_PREFIX_PATH="./vcpkg/installed/x86-windows-static" -DOPENSSL_ROOT_DIR="./vcpkg/installed/x86-windows-static" -DVCPKG_TARGET_TRIPLET=x86-windows-static
#         cmake -B ${{github.workspace}}/windows -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_INSTALL_PREFIX=${{env.OUT_PATH}} -DLIVE555_ENABLE_OPENSSL=OFF -DLIVE555_BUILD_EXAMPLES=OFF -DCMAKE_TOOLCHAIN_FILE="./vcpkg/scripts/buildsystems/vcpkg.cmake"
        
    - name: Build
      # Build your program with the given configuration
      run: 
        cmake --build ${{github.workspace}}/windows --config ${{env.BUILD_TYPE}} --target ${{env.OUT_PATH}} -j20

#       - name: create-archive
#         id: create_archive
#         run: 
#           powershell Compress-7Zip ${{env.OUT_PATH}} -ArchiveFileName ${{env.ARCHIVE_NAME}}_win64.zip -Format Zip
#       - name: create-checksum
#         id: create-checksum
#         run: |
#           sha256sum "$ARCHIVE_NAME"_win64.zip > checksum_shared.txt
#           echo "::set-output name=checksum::$(cut -d ' ' -f 1 checksum_win64.txt)"
          
#       - name: create-release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#             GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token, https://github.com/settings/tokens
#         with:
#             tag_name: ${{ github.ref }}_${{ steps.date.outputs.date }}
#             release_name: Release ${{ github.ref }} ${{ steps.date.outputs.date }}
#             draft: false
#             prerelease: false

#       - name: upload-archive-shared
#         id: upload-release-asset_shared
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token, https://github.com/settings/tokens
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }}
#           asset_path: ${{ env.ARCHIVE_NAME }}_win64.zip
#           asset_name: ${{ env.ARCHIVE_NAME }}_win64.zip
#           asset_content_type: application/gzip

#       - name: Package
#         run: .\package.ps1

#       - name: Create Release
#         id: create_release
#         uses: actions/create-release@latest
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ github.ref }}
#           release_name: ${{ github.ref }}

  build_windows_x64:
    name: Windows Build X64
    runs-on: windows-latest
    strategy:
      matrix:
        kind: [x64]
    steps:
#       - name: Install 7Zip PowerShell Module
#         shell: powershell
#         run: Install-Module 7Zip4PowerShell -Force
        
#       - name: Get current date
#         id: date
#         run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
        
    - uses: actions/checkout@v2
#       id: checkout
#     - name: Set output
#       id: vars
#       run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
#     - name: Check output
#       env:
#         RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
#       run: |
#         echo $RELEASE_VERSION
#         echo ${{ steps.vars.outputs.tag }}

#        
#         run: echo "GIT_TAG=`echo $(git describe --tags --abbrev=0)`" >> $GITHUB_ENV
#          git fetch --tags --force # Retrieve annotated tags. THIS TRICK REALLY HELPS
#          echo ::set-output name=subject::$(git for-each-ref $GITHUB_REF --format='%(contents:subject)')
#          # …
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1

    - name: Installing vcpkg
      run: |
        git clone --depth 1 https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        .\bootstrap-vcpkg.bat
        .\vcpkg.exe integrate install
        .\vcpkg.exe install openssl:x64-windows-static
        set OPENSSL_ROOT_DIR="./installed/x64-windows-static"


#     - name: Configure CMake Static Library
#       # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#       # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#       run: cmake -B ${{github.workspace}}/static -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=${{env.OUT_PATH}} -DLIVE555_ENABLE_OPENSSL=ON -DLIVE555_BUILD_EXAMPLES=ON
      
#     - name: Build Static Library
#       # Build your program with the given configuration
#       run: 
#         cmake --build ${{github.workspace}}/static --config ${{env.BUILD_TYPE}} --target ${{env.OUT_PATH}}
       
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      #-DCMAKE_TOOLCHAIN_FILE=D:/a/live555/live555/vcpkg/scripts/buildsystems/vcpkg.cmake
      #-DOPENSSL_ROOT_DIR="D:/vcpkg/installed/x64-windows" 
      run: 
        #cmake -B ${{github.workspace}}/windows -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_INSTALL_PREFIX=${{env.OUT_PATH}} -DLIVE555_ENABLE_OPENSSL=OFF -DLIVE555_BUILD_EXAMPLES=OFF -DCMAKE_TOOLCHAIN_FILE="./vcpkg/scripts/buildsystems/vcpkg.cmake"          
        cmake -B ${{github.workspace}}/windows -A x64 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_INSTALL_PREFIX=${{env.OUT_PATH}} -DLIVE555_ENABLE_OPENSSL=ON -DLIVE555_BUILD_EXAMPLES=OFF -DCMAKE_TOOLCHAIN_FILE="./vcpkg/scripts/buildsystems/vcpkg.cmake" -DCMAKE_PREFIX_PATH="./vcpkg/installed/x64-windows-static" -DOPENSSL_ROOT_DIR="./vcpkg/installed/x64-windows-static" -DVCPKG_TARGET_TRIPLET=x64-windows-static
#         cmake -B ${{github.workspace}}/windows -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_INSTALL_PREFIX=${{env.OUT_PATH}} -DLIVE555_ENABLE_OPENSSL=OFF -DLIVE555_BUILD_EXAMPLES=OFF -DCMAKE_TOOLCHAIN_FILE="./vcpkg/scripts/buildsystems/vcpkg.cmake"
        
    - name: Build
      # Build your program with the given configuration
      run: 
        cmake --build ${{github.workspace}}/windows --config ${{env.BUILD_TYPE}} --target ${{env.OUT_PATH}} -j20

#       - name: create-archive
#         id: create_archive
#         run: 
#           powershell Compress-7Zip ${{env.OUT_PATH}} -ArchiveFileName ${{env.ARCHIVE_NAME}}_win64.zip -Format Zip
#       - name: create-checksum
#         id: create-checksum
#         run: |
#           sha256sum "$ARCHIVE_NAME"_win64.zip > checksum_shared.txt
#           echo "::set-output name=checksum::$(cut -d ' ' -f 1 checksum_win64.txt)"
          
#       - name: create-release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#             GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token, https://github.com/settings/tokens
#         with:
#             tag_name: ${{ github.ref }}_${{ steps.date.outputs.date }}
#             release_name: Release ${{ github.ref }} ${{ steps.date.outputs.date }}
#             draft: false
#             prerelease: false

#       - name: upload-archive-shared
#         id: upload-release-asset_shared
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token, https://github.com/settings/tokens
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }}
#           asset_path: ${{ env.ARCHIVE_NAME }}_win64.zip
#           asset_name: ${{ env.ARCHIVE_NAME }}_win64.zip
#           asset_content_type: application/gzip

#       - name: Package
#         run: .\package.ps1

#       - name: Create Release
#         id: create_release
#         uses: actions/create-release@latest
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ github.ref }}
#           release_name: ${{ github.ref }}
