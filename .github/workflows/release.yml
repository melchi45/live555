name: Release

on:
  push:
    # refs/remotes/origin/master
#     branches: [ master ]
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  OUT_PATH: install
  CHECKOUT_REF: 'v103.0.0'
  ARCHIVE_NAME: ${{ github.event.repository.name }}-${{ github.event.repository.tag_name }}
jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      id: checkout
      with:
        # The branch, tag or SHA to checkout. When checking out the repository that
        # triggered a workflow, this defaults to the reference or SHA for that event.
        # Otherwise, uses the default branch.
        ref: ${{env.CHECKOUT_REF}}

    - name: Configure CMake Static Library
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/static -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=${{env.OUT_PATH}} -DLIVE555_ENABLE_OPENSSL=ON -DLIVE555_BUILD_EXAMPLES=ON
      
    - name: Build Static Library
      # Build your program with the given configuration
      run: 
        cmake --build ${{github.workspace}}/static --config ${{env.BUILD_TYPE}} --target ${{env.OUT_PATH}}
        
    - name: Test Static
      working-directory: ${{github.workspace}}/static
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: 
        ctest -C ${{env.BUILD_TYPE}}
        
    - name: create-archive-static
      id: create_archive_static
      run: 
        tar -czf "$ARCHIVE_NAME"_static.tar.gz ${{env.OUT_PATH}}
      
    - name: Configure CMake Shared Library
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/shared -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=${{env.OUT_PATH}} -DLIVE555_ENABLE_OPENSSL=ON -DLIVE555_BUILD_EXAMPLES=ON -DLIVE555_BUILD_SHARED_LIBS=ON

    - name: Build Shared Library
      # Build your program with the given configuration
      run: 
        cmake --build ${{github.workspace}}/shared --config ${{env.BUILD_TYPE}} --target ${{env.OUT_PATH}}
        
    - name: Test Shared
      working-directory: ${{github.workspace}}/shared
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: 
        ctest -C ${{env.BUILD_TYPE}}

    - name: create-archive
      id: create_archive
      run: 
        tar -czf "$ARCHIVE_NAME"_shared.tar.gz ${{env.OUT_PATH}}

    - name: create-checksum
      id: create-checksum
      run: |
        sha256sum "$ARCHIVE_NAME"_static.tar.gz > checksum_static.txt
        echo "::set-output name=checksum::$(cut -d ' ' -f 1 checksum_static.txt)"
        sha256sum "$ARCHIVE_NAME"_shared.tar.gz > checksum_shared.txt
        echo "::set-output name=checksum::$(cut -d ' ' -f 1 checksum_shared.txt)"
        
    - name: create-release
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token, https://github.com/settings/tokens
      with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          
    - name: upload-archive-static
      id: upload-release-asset_static
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token, https://github.com/settings/tokens
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.ARCHIVE_NAME }}_static.tar.gz
        asset_name: ${{ env.ARCHIVE_NAME }}_static.tar.gz
        asset_content_type: application/gzip

    - name: upload-archive-shared
      id: upload-release-asset_shared
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token, https://github.com/settings/tokens
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.ARCHIVE_NAME }}_shared.tar.gz
        asset_name: ${{ env.ARCHIVE_NAME }}_shared.tar.gz
        asset_content_type: application/gzip
    
    - name: upload-checksum-static
      id: upload-checksum_static
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token, https://github.com/settings/tokens
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: checksum_static.txt
        asset_name: checksum_static.txt
        asset_content_type: text/plain
        
    - name: upload-checksum-shared
      id: upload-checksum_shared
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token, https://github.com/settings/tokens
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: checksum_shared.txt
        asset_name: checksum_shared.txt
        asset_content_type: text/plain
